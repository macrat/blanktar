title: gzipの圧縮レベルと速度の関係を調べてみた
date: 2015-07-25 21:08
keywords: gzip 圧縮 速度 圧縮レベル 圧縮率

gzipってやつには圧縮レベルなんてオプションがありますが、あれと速度の関係はどんな感じなんでしょうね？ 気になったので調べてみました。

テストに使ったのはpython付属のgzipライブラリ。tmpfs上でテストしたので読み書きのオーバーヘッドはかなり小さいはず。
データには[wikipediaのgzipの記事](http://ja.wikipedia.org/wiki/Gzip)を100回繰り替えしたものを使ってみました。5.5MBくらい。
コードは末尾に。

そんなことより結果から。
<table><tr>
<th>圧縮レベル</th><th>圧縮[秒]</th><th>伸長[秒]</th><th>圧縮後のサイズ</th><th>圧縮率</th></tr><tr><td>オリジナル</td><td>0</td><td>0</td><td>5457300</td><td>1</td></tr><tr><td>1</td><td>0.0565</td><td>0.0233</td><td>1704911</td><td>0.312</td></tr><tr><td>2</td><td>0.0610</td><td>0.0232</td><td>1637668</td><td>0.300</td></tr><tr><td>3</td><td>0.0684</td><td>0.0225</td><td>1599015</td><td>0.293</td></tr><tr><td>4</td><td>0.0821</td><td>0.0223</td><td>1485118</td><td>0.272</td></tr><tr><td>5</td><td>0.1087</td><td>0.0222</td><td>1444208</td><td>0.264</td></tr><tr><td>6</td><td>0.1392</td><td>0.0220</td><td>1426554</td><td>0.261</td></tr><tr><td>7</td><td>0.1515</td><td>0.0215</td><td>1422199</td><td>0.260</td></tr><tr><td>8</td><td>0.1758</td><td>0.0214</td><td>1418481</td><td>0.259</td></tr><tr><td>9</td><td>0.1772</td><td>0.0215</td><td>1418481</td><td>0.259</td></tr></table>
レベルが上がると圧縮の時間が伸びるけれど、伸長は変わらない。

グラフ化するとこんな感じ。
[IMG: gzipの圧縮レベルと圧縮時間の関係](/blog/2015/07/gzip-comp.png)
[IMG: gzipの圧縮レベルと伸長時間の関係](/blog/2015/07/gzip-deco.png)
[IMG: gzipの圧縮レベルと圧縮率の関係](/blog/2015/07/gzip-rate.png)
上から順に圧縮にかかる時間、伸長にかかる時間、圧縮率。

圧縮レベル6を越えたあたりから時間がかかるばっかで圧縮率が変わらない。不毛な感じ。
レベルが上がるにつれて伸長にかかる時間が若干減ってるのは・・・何だろう？ IO関連か？

こうやってみると、大抵デフォルトに設定されてるレベル6ってのは実にバランス取れてるんだなぁと思ったり。

テスト用に使ったコードはこんな感じ。
	import gzip
	import timeit
	import urllib.request

	TRY = 100
	DATA = urllib.request.urlopen('http://ja.wikipedia.org/wiki/Gzip').read() * 100


	def comp(level):
		with gzip.open('test.gz', 'wb', compresslevel=level) as fp:
			fp.write(DATA)


	def decomp():
		with gzip.open('test.gz', 'rb') as fp:
			fp.read()


	if __name__ == '__main__':
		print('level\tcomp\tdecomp\tsize')
		print('original\t0\t0\t{0}'.format(len(DATA)))
		for i in range(1, 10):
			co = timeit.timeit(lambda : comp(i), number=TRY)/TRY
			size = len(open('test.gz', 'rb').read())
			de = timeit.timeit(decomp, number=TRY)/TRY
			print('{0}\t{1}\t{2}\t{3}'.format(i, co, de, size))
同じ圧縮レベルをまとめて試すのは本当はよくないんだろうけれど、まあ面倒くさいので。
