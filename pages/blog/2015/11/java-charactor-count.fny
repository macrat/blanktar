title: Javaで文字の出現回数を数えたい
date: 2015-11-08 22:28
keywords: Java 文字 文字列 正規表現

[RuuMusic](https://play.google.com/store/apps/details?id=jp.blanktar.ruumusic)をアンドロイダーに[載せて](https://androider.jp/official/app/0e09673c7fb26c06/)いただきまして、急激にインストール数が増えてうはうはです。アンドロイダーさまさまです。
でまあ、改良を続けているわけなんですが。

ファイルパスの深さを知るためにスラッシュの数を数える、という処理があります。
ググったらなんか出て来た適当な書き方をしているのですが、どうやらこれがとても重いらしく。
しかたがないので、思い付いた4通りの書き方を試してみました。

一つめ。何も考えずに数える方法。
``` java
	int simple(String str, char target){
		int count = 0;

		for(char x: str.toCharArray()){
			if(x == target){
				count++;
			}
		}

		return count;
	}
```
考えてません。とてもシンプルです。

二つめ。replaceで数えたい文字を抜いた文字列を作って、長さを比較することで数える方法。
``` java
	int replace(String str, char target){
		return str.length() - str.replace(target + "", "").length();
	}
```
短かくて良いやってことで適当に採用したのですが、あまり効率的ではないようです。

三つめ。数えたい文字で文字列を分割して、出来た配列の要素数で数える方法。
``` java
	int split(String str, char target){
		return str.split(target + "").length - 1;
	}
```
より短かくてちょっとおしゃれっぽいです。
splitメソッドは正規表現を引数に取るので、ドットのような正規表現で意味を持つ文字を探すときには要注意です。

四つめ。正規表現を使ってみた方法。
``` java
	int regex(String str, char target){
		Pattern p = Pattern.compile(target + "");
		Matcher m = p.matcher(str);
		int count = 0;

		while(m.find()){
			count++;
		}

		return count;
	}
```
長くて格好悪い上に、とても非効率っぽいです。だめだめです。

で、この四つのメソッドに3885文字の文字列を渡して100万回ずつ数えてみました。結果は以下のような感じ。
(((
	<table>
		<tr><td></td><th>265文字ヒット</th><th>101文字ヒット</th><th>0文字ヒット</th></tr>
		<tr><th>simple</th><td>988ms</td><td>884ms</td><td>884ms</td></tr>
		<tr><th>replace</th><td>26,009ms</td><td>18,685ms</td><td>10,150ms</td></tr>
		<tr><th>split</th><td>5,983ms</td><td>3,179ms</td><td>898ms</td></tr>
		<tr><th>regex</th><td>13,418ms</td><td>10,237ms</td><td>8,105ms</td></tr>
	</table>
)))
なんと、もの凄い差です。
何も考えずにfor文を回すのがベストなようです。
splitを使ったものだとヒットする文字が無いときに速くなるのに、regexではそうでもないというのがちょっと意外でした。splitはコンパイル結果をキャッシュしているのかもですね？

ともかくそんなわけで、難しいことを考えるのはやめましょうという結論でした。
